// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using P.ExtremeAuth.Data;

#nullable disable

namespace P.ExtremeAuth.Data.Migrations
{
    [DbContext(typeof(DbContext))]
    partial class DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("P.ExtremeAuth.Entity.Authorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConditionOperator")
                        .HasColumnType("int");

                    b.Property<string>("ConditionValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Mock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Authorization");
                });

            modelBuilder.Entity("P.ExtremeAuth.Entity.AuthorizationOf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.ToTable("AuthorizationOf");
                });

            modelBuilder.Entity("P.ExtremeAuth.Entity.AuthorizationTo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorizationOfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationOfId");

                    b.ToTable("AuthorizationTo");
                });

            modelBuilder.Entity("P.ExtremeAuth.Entity.Procedure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProcedureDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Runtime")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ProcedureDefinitionId");

                    b.ToTable("Procedure");
                });

            modelBuilder.Entity("P.ExtremeAuth.Entity.ProcedureDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProcedureDefinition");
                });

            modelBuilder.Entity("P.ExtremeAuth.Entity.AuthorizationOf", b =>
                {
                    b.HasOne("P.ExtremeAuth.Entity.Authorization", "Authorization")
                        .WithMany("AuthorizationOfs")
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("P.ExtremeAuth.Entity.AuthorizationTo", b =>
                {
                    b.HasOne("P.ExtremeAuth.Entity.AuthorizationOf", "AuthorizationOf")
                        .WithMany("AuthorizationTos")
                        .HasForeignKey("AuthorizationOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorizationOf");
                });

            modelBuilder.Entity("P.ExtremeAuth.Entity.Procedure", b =>
                {
                    b.HasOne("P.ExtremeAuth.Entity.Authorization", "Authorization")
                        .WithMany("Procedures")
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P.ExtremeAuth.Entity.ProcedureDefinition", "ProcedureDefinition")
                        .WithMany()
                        .HasForeignKey("ProcedureDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authorization");

                    b.Navigation("ProcedureDefinition");
                });

            modelBuilder.Entity("P.ExtremeAuth.Entity.Authorization", b =>
                {
                    b.Navigation("AuthorizationOfs");

                    b.Navigation("Procedures");
                });

            modelBuilder.Entity("P.ExtremeAuth.Entity.AuthorizationOf", b =>
                {
                    b.Navigation("AuthorizationTos");
                });
#pragma warning restore 612, 618
        }
    }
}
